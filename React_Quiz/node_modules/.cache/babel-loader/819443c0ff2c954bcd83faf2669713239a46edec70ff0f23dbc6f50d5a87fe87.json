{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\benny\\\\Desktop\\\\Coding\\\\WebAvanzato\\\\React_Quiz\\\\src\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n//Questa funzione, date le properties, genera una riga di una domanda\n//daVisualizzare -> testo della domanda\n//statoQuiz -> se il quiz è finito o meno\n//option -> contiene la funzione per aggiornare l'opzione selezionata\n//id -> contiene l'id della domanda\n//check -> vero o falso. Serve per capire se questa è la risposta selezionata. In caso vero, appare il pallino pieno\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Opzione({\n  daVisualizzare,\n  statoQuiz,\n  option,\n  id,\n  check\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"col-sm-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        autocomplete: \"off\",\n        value: daVisualizzare,\n        onChange: option,\n        disabled: statoQuiz === true,\n        checked: check,\n        id: id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: daVisualizzare\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 41\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 8\n    }, this)\n  }, void 0, false);\n}\n\n//Questa funzione, date le properties, renderizza la domanda e le 4 risposte.\n// domanda -> contiene il testo della domanda\n// risposte -> è un array contenente le risposte\n// statoQuiz -> vero/falso, indica se il quiz è finito. va passata al componente Opzione\n// option -> contiene la funzione per aggiornare l'opzione selezionata. va passata al componente Opzione\n// id -> contiene l'id della domanda. \n// arrayRisp -> array contenente tutte le risposte del quiz. in combinazione con l'id della domanda,\n//mi permette di verificare se la risposta individuata è uguale a quella passata al componente Opzione\n_c = Opzione;\nfunction Domanda({\n  domanda,\n  risposte,\n  statoQuiz,\n  option,\n  id,\n  arrayRisp\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      className: \"fw-bold\",\n      children: [\" \", domanda]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: risposte.map((risposta, i) => {\n        return /*#__PURE__*/_jsxDEV(Opzione, {\n          daVisualizzare: risposta,\n          statoQuiz: statoQuiz,\n          option: option,\n          id: id,\n          check: arrayRisp[id] === risposta //Verifico se la risposta associata all'id è uguale a quella in esame.\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n//Funzione che, dato un array di risposte, analizza e calcola il risultato ottenuto\n_c2 = Domanda;\nfunction Winner({\n  fine,\n  risposte,\n  data,\n  nquiz\n}) {\n  if (fine) {\n    var punti = 0;\n    var errori = [];\n    for (var i = 0; i < risposte.length; i++) {\n      console.log(data.domande[i].corretta);\n      console.log(risposte[i]);\n      if (risposte[i] === data.domande[i].corretta) punti++;else errori.push( /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"la domanda \", i + 1, \" \\xE8 sbagliata, la risposta corretta \\xE8: \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: data.domande[i].corretta\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 86\n        }, this), \" \"]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this));\n    }\n\n    //creo un json che contiene l'esito del quiz\n    var result = {\n      \"codQuiz\": nquiz,\n      \"email\": \"lucapa@gmail.com\",\n      \"errori\": errori.length\n    };\n    console.log(result);\n\n    //invio l'esito del quiz attraverso una post\n    fetch(\"http://localhost:3001/insertQuizResult\", {\n      method: 'post',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(result)\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" Totalizzati \", punti, \" punti\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 5\n      }, this), errori.map(errore => {\n        return errore;\n      })]\n    }, void 0, true);\n  }\n}\n_c3 = Winner;\nexport default function Quiz({\n  nquiz\n}) {\n  _s();\n  // Stato che contiene i dati delle domande, acquisiti tramite\n  const [data, setData] = useState();\n  // Stato che contiene l'elenco delle risposte selezionate\n  const [answerArray, SetAnswer] = useState([]);\n  // Stato che tiene traccia della domanda da visualizzare. All'inizio è visualizzata la prima domanda\n  const [idDomanda, setidDomanda] = useState(0);\n  // Stato che assume valore Vero o falso. Indica se il quiz è in corso oppure terminato\n  const [fine, setFine] = useState(0);\n\n  // Stato che valuta se la fetch è conclusa. Inizialmente vero. Quando i dati son caricati, diventa falso\n  const [loading, setLoading] = useState(true);\n\n  // Una funzione che esegue il fetch dell'elenco delle domande, dato l'id di un quiz\n  function fetchDomande(nquiz) {\n    //il fetch viene eseguito solo quando nquiz è un valore diverso da zero, quindi solo dopo aver premuto un pulsante\n    if (nquiz > 0) {\n      fetch(\"http://localhost:3001/getDomande/\" + nquiz, {\n        method: \"get\"\n      }).then(res => {\n        return res.json();\n      }).then(data => {\n        console.log(\"Questions uploaded\");\n        console.log(data);\n        setData(data); //imposta l'elenco delle domande\n        //Inizializzo il quiz impostando gli stati al loro lavore iniziale\n        setLoading(false); // Imposta lo stato di caricamento a false\n        setidDomanda(0);\n        SetAnswer([]);\n        setFine(0);\n      });\n    }\n  }\n\n  // useEffect fa si che la funzione fetchDomande venga eseguita ogni volta che nquiz cambia -> , [nquiz]\n  useEffect(() => fetchDomande(nquiz), [nquiz]);\n\n  //Questa funzione mi permette di aggiornare l'array delle risposte quando viene cliccato un radio button\n  const onOptionChange = e => {\n    const answ = answerArray.slice();\n    console.log(\"IMPOSTO ANSWER\");\n    console.log(answ);\n    answ[e.target.id] = e.target.value;\n    SetAnswer(answ);\n  };\n\n  // Render condizionale\n  // Questa parte del programma renderizza una schermata di caricamento, una schermata di errore\n  //oppure le domande del quiz\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 14\n    }, this); // Mostra un indicatore di caricamento\n  }\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error loading data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 14\n    }, this); // Mostra un messaggio di errore se i dati non sono presenti\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Domanda, {\n      id: data.domande[idDomanda].id,\n      domanda: data.domande[idDomanda].domanda,\n      risposte: data.domande[idDomanda].risposte,\n      corretta: data.domande[idDomanda].corretta,\n      statoQuiz: fine,\n      option: onOptionChange,\n      arrayRisp: answerArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \"Clicca qui per controllare\",\n      onClick: () => {\n        setFine(true);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \"AVANTI\",\n      disabled: idDomanda === data[\"domande\"].length - 1 // disabilito il pulsante se l'id è pari alla lunghezza dell'elenco delle domande\n      ,\n      onClick: () => {\n        setidDomanda(idDomanda + 1);\n      } //con il click, imposto il nuovo idDomanda a +1, andando alla successiva\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \"INDIETRO\",\n      disabled: idDomanda === 0 // disabilito il pulsante se l'id è pari a 0, quindi sono alla prima domanda\n      ,\n      onClick: () => {\n        setidDomanda(idDomanda - 1);\n      } //con il click, imposto il nuovo idDomanda a -1, andando alla precedente\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" Selected answer \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: answerArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" stato: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: fine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Winner, {\n      fine: fine,\n      risposte: answerArray,\n      data: data,\n      nquiz: nquiz\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(Quiz, \"97vORrt8Nm9EE+I1uNoTRSjt/Ok=\");\n_c4 = Quiz;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Opzione\");\n$RefreshReg$(_c2, \"Domanda\");\n$RefreshReg$(_c3, \"Winner\");\n$RefreshReg$(_c4, \"Quiz\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Opzione","daVisualizzare","statoQuiz","option","id","check","children","class","type","autocomplete","value","onChange","disabled","checked","fileName","_jsxFileName","lineNumber","columnNumber","_c","Domanda","domanda","risposte","arrayRisp","style","textAlign","className","map","risposta","i","_c2","Winner","fine","data","nquiz","punti","errori","length","console","log","domande","corretta","push","result","fetch","method","headers","body","JSON","stringify","errore","_c3","Quiz","_s","setData","answerArray","SetAnswer","idDomanda","setidDomanda","setFine","loading","setLoading","fetchDomande","then","res","json","onOptionChange","e","answ","slice","target","onClick","_c4","$RefreshReg$"],"sources":["C:/Users/benny/Desktop/Coding/WebAvanzato/React_Quiz/src/Quiz.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n  //Questa funzione, date le properties, genera una riga di una domanda\r\n  //daVisualizzare -> testo della domanda\r\n  //statoQuiz -> se il quiz è finito o meno\r\n  //option -> contiene la funzione per aggiornare l'opzione selezionata\r\n  //id -> contiene l'id della domanda\r\n  //check -> vero o falso. Serve per capire se questa è la risposta selezionata. In caso vero, appare il pallino pieno\r\n  function Opzione({daVisualizzare,statoQuiz,option, id, check}){\r\n    return(\r\n    <>\r\n       <div class=\"col-sm-3\">\r\n        <input\r\n        type=\"radio\"\r\n        autocomplete=\"off\"\r\n        value={daVisualizzare}\r\n        onChange={option}\r\n        disabled={statoQuiz===true}\r\n        checked= {check}\r\n        id= {id}\r\n        \r\n      /><label >{daVisualizzare}</label><br/>\r\n      </div>\r\n    </>)\r\n  }\r\n  \r\n  //Questa funzione, date le properties, renderizza la domanda e le 4 risposte.\r\n  // domanda -> contiene il testo della domanda\r\n  // risposte -> è un array contenente le risposte\r\n  // statoQuiz -> vero/falso, indica se il quiz è finito. va passata al componente Opzione\r\n  // option -> contiene la funzione per aggiornare l'opzione selezionata. va passata al componente Opzione\r\n  // id -> contiene l'id della domanda. \r\n  // arrayRisp -> array contenente tutte le risposte del quiz. in combinazione con l'id della domanda,\r\n                      //mi permette di verificare se la risposta individuata è uguale a quella passata al componente Opzione\r\n  function Domanda({domanda,risposte,statoQuiz,option,id, arrayRisp}){\r\n    return (\r\n      <>\r\n        <p style={{textAlign:'center',}} className=\"fw-bold\"> {domanda}</p>\r\n        <div className=\"row\">\r\n        {/* map delle risposte. per ogni risposta, creo un componente figlio Opzione */}\r\n        {risposte.map((risposta,i)=>{\r\n          return(\r\n        <Opzione\r\n          key={i}\r\n          daVisualizzare={risposta} \r\n          statoQuiz={statoQuiz}\r\n          option={option}\r\n          id = {id}\r\n          check = {arrayRisp[id]===risposta} //Verifico se la risposta associata all'id è uguale a quella in esame.\r\n           />)\r\n      })}\r\n      </div>\r\n\r\n      \r\n      </>\r\n    )\r\n  }\r\n\r\n  //Funzione che, dato un array di risposte, analizza e calcola il risultato ottenuto\r\n  function Winner({fine,risposte,data, nquiz}){\r\n    if(fine){\r\n    var punti =0\r\n    var errori= []\r\n    for (var i=0;i<risposte.length;i++){\r\n      console.log(data.domande[i].corretta)\r\n      console.log(risposte[i])\r\n      if (risposte[i]===data.domande[i].corretta)\r\n        punti++;\r\n      else\r\n        errori.push(<p key={i}>la domanda {i+1} è sbagliata, la risposta corretta è: <b>{data.domande[i].corretta}</b> </p>)\r\n    }\r\n\r\n    //creo un json che contiene l'esito del quiz\r\n    var result = { \"codQuiz\": nquiz, \"email\": \"lucapa@gmail.com\", \"errori\": errori.length}\r\n    console.log(result)\r\n\r\n    //invio l'esito del quiz attraverso una post\r\n    fetch(\"http://localhost:3001/insertQuizResult\",{\r\n        method: 'post',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          },\r\n        body: JSON.stringify(result)\r\n    })\r\n\r\n    return <>\r\n    <p> Totalizzati {punti} punti</p>\r\n    {errori.map((errore)=> {return errore })}\r\n    </>\r\n    }\r\n  \r\n  \r\n  }\r\n\r\n  export default function Quiz({nquiz}){\r\n\r\n    // Stato che contiene i dati delle domande, acquisiti tramite\r\n    const [data,setData] = useState()\r\n    // Stato che contiene l'elenco delle risposte selezionate\r\n    const [answerArray,SetAnswer] = useState([])\r\n    // Stato che tiene traccia della domanda da visualizzare. All'inizio è visualizzata la prima domanda\r\n    const [idDomanda,setidDomanda] = useState(0)\r\n    // Stato che assume valore Vero o falso. Indica se il quiz è in corso oppure terminato\r\n    const [fine,setFine] = useState(0)\r\n\r\n    // Stato che valuta se la fetch è conclusa. Inizialmente vero. Quando i dati son caricati, diventa falso\r\n    const [loading, setLoading] = useState(true); \r\n\r\n    // Una funzione che esegue il fetch dell'elenco delle domande, dato l'id di un quiz\r\n    function fetchDomande(nquiz) {\r\n      //il fetch viene eseguito solo quando nquiz è un valore diverso da zero, quindi solo dopo aver premuto un pulsante\r\n      if(nquiz>0){\r\n        fetch(\"http://localhost:3001/getDomande/\"+nquiz,{method: \"get\"}).then((res) => {return res.json();}).then(\r\n                                        (data) => {\r\n                                        console.log(\"Questions uploaded\")\r\n\r\n                                        console.log(data)\r\n                                        setData(data)   //imposta l'elenco delle domande\r\n                                        //Inizializzo il quiz impostando gli stati al loro lavore iniziale\r\n                                        setLoading(false); // Imposta lo stato di caricamento a false\r\n                                        setidDomanda(0)\r\n                                        SetAnswer([])\r\n                                        setFine(0)\r\n                                      })\r\n      }\r\n    }\r\n\r\n    // useEffect fa si che la funzione fetchDomande venga eseguita ogni volta che nquiz cambia -> , [nquiz]\r\n    useEffect(()=>fetchDomande(nquiz), [nquiz])\r\n\r\n    //Questa funzione mi permette di aggiornare l'array delle risposte quando viene cliccato un radio button\r\n    const onOptionChange = e => {\r\n        const answ=answerArray.slice()\r\n        console.log(\"IMPOSTO ANSWER\")\r\n        console.log(answ)\r\n        answ[e.target.id]=e.target.value \r\n        SetAnswer(answ)\r\n        }\r\n\r\n\r\n    // Render condizionale\r\n    // Questa parte del programma renderizza una schermata di caricamento, una schermata di errore\r\n                        //oppure le domande del quiz\r\n    if (loading) {\r\n      return <div>Loading...</div>; // Mostra un indicatore di caricamento\r\n    }\r\n\r\n    if (!data) {\r\n      return <div>Error loading data</div>; // Mostra un messaggio di errore se i dati non sono presenti\r\n    }\r\n    return <>\r\n    {/* Creo la domanda del quiz associata ad idDomanda */}\r\n    <Domanda\r\n              id = { data.domande[idDomanda].id}\r\n              domanda={data.domande[idDomanda].domanda} \r\n              risposte={data.domande[idDomanda].risposte} \r\n              corretta={data.domande[idDomanda].corretta}\r\n              statoQuiz={fine}\r\n              option={onOptionChange}\r\n              arrayRisp= {answerArray}\r\n            />\r\n\r\n    {/* Questo pulsante imposta lo stato fine a vero, terminando il quiz */}\r\n    <input\r\n              type=\"button\"\r\n              value=\"Clicca qui per controllare\"\r\n              onClick={() => {setFine(true)}} \r\n            />\r\n            <br />\r\n    {/* Questo pulsante mi consente di andare avanti di una domanda */}\r\n    <input\r\n              type=\"button\"\r\n              value=\"AVANTI\"\r\n              disabled={idDomanda===data[\"domande\"].length-1} // disabilito il pulsante se l'id è pari alla lunghezza dell'elenco delle domande\r\n              onClick={() => {setidDomanda(idDomanda+1)}} //con il click, imposto il nuovo idDomanda a +1, andando alla successiva\r\n            />\r\n    <input\r\n              type=\"button\"\r\n              value=\"INDIETRO\"\r\n              disabled={idDomanda===0} // disabilito il pulsante se l'id è pari a 0, quindi sono alla prima domanda\r\n              onClick={() => {setidDomanda(idDomanda-1)}}  //con il click, imposto il nuovo idDomanda a -1, andando alla precedente\r\n            />\r\n\r\n    {/* alcune stampe di debug */}\r\n    <p> Selected answer <strong>{answerArray}</strong></p>\r\n    <p> stato: <strong>{fine}</strong></p>\r\n\r\n    {/* componente Winner per valutare l'esito del quiz. */}\r\n    <Winner fine={fine} risposte={answerArray} data={data} nquiz={nquiz}/>\r\n    </>\r\n  }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}